@import "tailwindcss";

/* Base variables */
:root {
  /* Theme colors */
  --background: #ffffff;
  --foreground: #171717;
  --primary: #202225;
  --secondary: #5865f2;

  /* Gray scale */
  --color-gray-900: #202225;
  --color-gray-800: #2f3136;
  --color-gray-700: #36393f;
  --color-gray-600: #4f545c;
  --color-gray-400: #d4d7dc;
  --color-gray-300: #e3e5e8;
  --color-gray-200: #ebedef;
  --color-gray-100: #f2f3f5;

  /* Fonts */
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

/* Optional: additional theme semantic mappings */
@theme {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-primary: var(--primary);
  --color-secondary: var(--secondary);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

/* Dark mode override */
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

/* Global styles */

/* If you want to add your own default base styles for specific HTML elements, use the @layer directive to add those styles to Tailwind's base layer: */
@layer base {
  body {
    background: var(--background);
    color: var(--foreground);
    font-family: var(--font-sans), Arial, Helvetica, sans-serif;
  }
}

/* Use the components layer for any more complicated classes you want to add to your project that you'd still like to be able to override with utility classes.

Traditionally these would be classes like card, btn, badge — that kind of thing. */
@layer components {
  .sidebar-icon {
    /* Use the @apply directive to inline any existing utility classes into your own custom CSS: */
    @apply relative flex items-center justify-center 
    h-12 w-12 mt-2 mb-2 mx-auto  
  bg-gray-400 hover:bg-green-600 dark:bg-gray-800 
  text-green-500 hover:text-white
    hover:rounded-xl rounded-3xl
    transition-all duration-300 ease-linear
    cursor-pointer shadow-lg;
    /* This is useful when you need to write custom CSS (like to override the styles in a third-party library) but still want to work with your design tokens and use the same syntax you’re used to using in your HTML. */
  }

  .sidebar {
    @apply fixed top-0 left-0 h-screen w-16 flex flex-col bg-gray-900 text-white;
  }
}

/* If your project has class names that conflict with Tailwind CSS utilities, you can prefix all Tailwind-generated classes and CSS variables using the prefix option: */
/* @layer theme {
  
} */

/* In addition to using the utilities that ship with Tailwind, you can also add your own custom utilities. This can be useful when there's a CSS feature you'd like to use in your project that Tailwind doesn't include utilities for out of the box. */
/* @layer utilities {

} */
